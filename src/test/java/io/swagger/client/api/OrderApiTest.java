/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues. 
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.upstox.api.ApiGatewayErrorResponse;
import com.upstox.api.CancelOrExitMultiOrderResponse;
import com.upstox.api.CancelOrderResponse;
import com.upstox.api.GetOrderBookResponse;
import com.upstox.api.GetOrderResponse;
import com.upstox.api.GetTradeResponse;
import com.upstox.api.ModifyOrderRequest;
import com.upstox.api.ModifyOrderResponse;
import com.upstox.api.MultiOrderRequest;
import com.upstox.api.MultiOrderResponse;
import com.upstox.api.PlaceOrderRequest;
import com.upstox.api.PlaceOrderResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for OrderApi
 */
@Ignore
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Cancel multi order
     *
     * API to cancel all the open or pending orders which can be applied to both AMO and regular orders.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelMultiOrderTest() throws Exception {
        String tag = null;
        String segment = null;
        CancelOrExitMultiOrderResponse response = api.cancelMultiOrder(tag, segment);

        // TODO: test validations
    }
    /**
     * Cancel order
     *
     * Cancel order API can be used for two purposes: Cancelling an open order which could be an AMO or a normal order It is also used to EXIT a CO or OCO(bracket order)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void cancelOrderTest() throws Exception {
        String orderId = null;
        String apiVersion = null;
        CancelOrderResponse response = api.cancelOrder(orderId, apiVersion);

        // TODO: test validations
    }
    /**
     * Exit all positions
     *
     * This API provides the functionality to exit all the positions
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void exitPositionsTest() throws Exception {
        String tag = null;
        String segment = null;
        CancelOrExitMultiOrderResponse response = api.exitPositions(tag, segment);

        // TODO: test validations
    }
    /**
     * Get order book
     *
     * This API provides the list of orders placed by the user. The orders placed by the user is transient for a day and is cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrderBookTest() throws Exception {
        String apiVersion = null;
        GetOrderBookResponse response = api.getOrderBook(apiVersion);

        // TODO: test validations
    }
    /**
     * Get order details
     *
     * This API provides the details of the particular order the user has placed. The orders placed by the user is transient for a day and are cleared by the end of the trading session. This API returns all states of the orders, namely, open, pending, and filled ones.  The order history can be requested either using order_id or tag.  If both the options are passed, the history of the order which precisely matches both the order_id and tag will be returned in the response.  If only the tag is passed, the history of all the associated orders which matches the tag will be shared in the response.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrderDetailsTest() throws Exception {
        String apiVersion = null;
        String orderId = null;
        String tag = null;
        GetOrderResponse response = api.getOrderDetails(apiVersion, orderId, tag);

        // TODO: test validations
    }
    /**
     * Get trades
     *
     * Retrieve the trades executed for the day
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTradeHistoryTest() throws Exception {
        String apiVersion = null;
        GetTradeResponse response = api.getTradeHistory(apiVersion);

        // TODO: test validations
    }
    /**
     * Get trades for order
     *
     * Retrieve the trades executed for an order
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTradesByOrderTest() throws Exception {
        String orderId = null;
        String apiVersion = null;
        GetTradeResponse response = api.getTradesByOrder(orderId, apiVersion);

        // TODO: test validations
    }
    /**
     * Modify order
     *
     * This API allows you to modify an order. For modification orderId is mandatory. With orderId you need to send the optional parameter which needs to be modified. In case the optional parameters aren&#x27;t sent, the default will be considered from the original order
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void modifyOrderTest() throws Exception {
        ModifyOrderRequest body = null;
        String apiVersion = null;
        ModifyOrderResponse response = api.modifyOrder(body, apiVersion);

        // TODO: test validations
    }
    /**
     * Place multi order
     *
     * This API allows you to place multiple orders to the exchange via Upstox.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void placeMultiOrderTest() throws Exception {
        List<MultiOrderRequest> body = null;
        MultiOrderResponse response = api.placeMultiOrder(body);

        // TODO: test validations
    }
    /**
     * Place order
     *
     * This API allows you to place an order to the exchange via Upstox.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void placeOrderTest() throws Exception {
        PlaceOrderRequest body = null;
        String apiVersion = null;
        PlaceOrderResponse response = api.placeOrder(body, apiVersion);

        // TODO: test validations
    }
}
