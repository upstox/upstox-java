/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.upstox.ApiCallback;
import com.upstox.ApiClient;
import com.upstox.ApiException;
import com.upstox.ApiResponse;
import com.upstox.Configuration;
import com.upstox.Pair;
import com.upstox.ProgressRequestBody;
import com.upstox.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.upstox.api.GetExpiredFuturesContractResponse;
import com.upstox.api.GetExpiriesResponse;
import com.upstox.api.GetHistoricalCandleResponse;
import com.upstox.api.GetOptionContractResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpiredInstrumentApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ExpiredInstrumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpiredInstrumentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getExpiredFutureContracts
     * @param instrumentKey Instrument Key of asset (required)
     * @param expiryDate Expiry date of the instrument (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExpiredFutureContractsCall(String instrumentKey, String expiryDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/expired-instruments/future/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instrumentKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instrument_key", instrumentKey));
        if (expiryDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiry_date", expiryDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExpiredFutureContractsValidateBeforeCall(String instrumentKey, String expiryDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'instrumentKey' is set
        if (instrumentKey == null) {
            throw new ApiException("Missing the required parameter 'instrumentKey' when calling getExpiredFutureContracts(Async)");
        }
        // verify the required parameter 'expiryDate' is set
        if (expiryDate == null) {
            throw new ApiException("Missing the required parameter 'expiryDate' when calling getExpiredFutureContracts(Async)");
        }
        
        com.squareup.okhttp.Call call = getExpiredFutureContractsCall(instrumentKey, expiryDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Expired instruments - Get future contracts
     * This API provides the functionality to retrieve expired future contracts for a given instrument key and expiry date.
     * @param instrumentKey Instrument Key of asset (required)
     * @param expiryDate Expiry date of the instrument (required)
     * @return GetExpiredFuturesContractResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetExpiredFuturesContractResponse getExpiredFutureContracts(String instrumentKey, String expiryDate) throws ApiException {
        ApiResponse<GetExpiredFuturesContractResponse> resp = getExpiredFutureContractsWithHttpInfo(instrumentKey, expiryDate);
        return resp.getData();
    }

    /**
     * Expired instruments - Get future contracts
     * This API provides the functionality to retrieve expired future contracts for a given instrument key and expiry date.
     * @param instrumentKey Instrument Key of asset (required)
     * @param expiryDate Expiry date of the instrument (required)
     * @return ApiResponse&lt;GetExpiredFuturesContractResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetExpiredFuturesContractResponse> getExpiredFutureContractsWithHttpInfo(String instrumentKey, String expiryDate) throws ApiException {
        com.squareup.okhttp.Call call = getExpiredFutureContractsValidateBeforeCall(instrumentKey, expiryDate, null, null);
        Type localVarReturnType = new TypeToken<GetExpiredFuturesContractResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Expired instruments - Get future contracts (asynchronously)
     * This API provides the functionality to retrieve expired future contracts for a given instrument key and expiry date.
     * @param instrumentKey Instrument Key of asset (required)
     * @param expiryDate Expiry date of the instrument (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExpiredFutureContractsAsync(String instrumentKey, String expiryDate, final ApiCallback<GetExpiredFuturesContractResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExpiredFutureContractsValidateBeforeCall(instrumentKey, expiryDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetExpiredFuturesContractResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExpiredHistoricalCandleData
     * @param expiredInstrumentKey Expired Instrument Key of asset (required)
     * @param interval Interval to get expired ohlc data (required)
     * @param toDate to date (required)
     * @param fromDate from date (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExpiredHistoricalCandleDataCall(String expiredInstrumentKey, String interval, String toDate, String fromDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/expired-instruments/historical-candle/{expired_instrument_key}/{interval}/{to_date}/{from_date}"
            .replaceAll("\\{" + "expired_instrument_key" + "\\}", apiClient.escapeString(expiredInstrumentKey.toString()))
            .replaceAll("\\{" + "interval" + "\\}", apiClient.escapeString(interval.toString()))
            .replaceAll("\\{" + "to_date" + "\\}", apiClient.escapeString(toDate.toString()))
            .replaceAll("\\{" + "from_date" + "\\}", apiClient.escapeString(fromDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExpiredHistoricalCandleDataValidateBeforeCall(String expiredInstrumentKey, String interval, String toDate, String fromDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expiredInstrumentKey' is set
        if (expiredInstrumentKey == null) {
            throw new ApiException("Missing the required parameter 'expiredInstrumentKey' when calling getExpiredHistoricalCandleData(Async)");
        }
        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling getExpiredHistoricalCandleData(Async)");
        }
        // verify the required parameter 'toDate' is set
        if (toDate == null) {
            throw new ApiException("Missing the required parameter 'toDate' when calling getExpiredHistoricalCandleData(Async)");
        }
        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling getExpiredHistoricalCandleData(Async)");
        }
        
        com.squareup.okhttp.Call call = getExpiredHistoricalCandleDataCall(expiredInstrumentKey, interval, toDate, fromDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Expired Historical candle data
     * Get Expired OHLC values for all instruments across various timeframes. Expired Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
     * @param expiredInstrumentKey Expired Instrument Key of asset (required)
     * @param interval Interval to get expired ohlc data (required)
     * @param toDate to date (required)
     * @param fromDate from date (required)
     * @return GetHistoricalCandleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetHistoricalCandleResponse getExpiredHistoricalCandleData(String expiredInstrumentKey, String interval, String toDate, String fromDate) throws ApiException {
        ApiResponse<GetHistoricalCandleResponse> resp = getExpiredHistoricalCandleDataWithHttpInfo(expiredInstrumentKey, interval, toDate, fromDate);
        return resp.getData();
    }

    /**
     * Expired Historical candle data
     * Get Expired OHLC values for all instruments across various timeframes. Expired Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
     * @param expiredInstrumentKey Expired Instrument Key of asset (required)
     * @param interval Interval to get expired ohlc data (required)
     * @param toDate to date (required)
     * @param fromDate from date (required)
     * @return ApiResponse&lt;GetHistoricalCandleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetHistoricalCandleResponse> getExpiredHistoricalCandleDataWithHttpInfo(String expiredInstrumentKey, String interval, String toDate, String fromDate) throws ApiException {
        com.squareup.okhttp.Call call = getExpiredHistoricalCandleDataValidateBeforeCall(expiredInstrumentKey, interval, toDate, fromDate, null, null);
        Type localVarReturnType = new TypeToken<GetHistoricalCandleResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Expired Historical candle data (asynchronously)
     * Get Expired OHLC values for all instruments across various timeframes. Expired Historical data can be fetched for the following durations. 1minute: last 1 month candles till endDate 30minute: last 1 year candles till endDate day: last 1 year candles till endDate week: last 10 year candles till endDate month: last 10 year candles till endDate
     * @param expiredInstrumentKey Expired Instrument Key of asset (required)
     * @param interval Interval to get expired ohlc data (required)
     * @param toDate to date (required)
     * @param fromDate from date (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExpiredHistoricalCandleDataAsync(String expiredInstrumentKey, String interval, String toDate, String fromDate, final ApiCallback<GetHistoricalCandleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExpiredHistoricalCandleDataValidateBeforeCall(expiredInstrumentKey, interval, toDate, fromDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetHistoricalCandleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExpiredOptionContracts
     * @param instrumentKey Instrument key for an underlying symbol (required)
     * @param expiryDate Expiry date in format: YYYY-mm-dd (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExpiredOptionContractsCall(String instrumentKey, String expiryDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/expired-instruments/option/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instrumentKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instrument_key", instrumentKey));
        if (expiryDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expiry_date", expiryDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExpiredOptionContractsValidateBeforeCall(String instrumentKey, String expiryDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'instrumentKey' is set
        if (instrumentKey == null) {
            throw new ApiException("Missing the required parameter 'instrumentKey' when calling getExpiredOptionContracts(Async)");
        }
        // verify the required parameter 'expiryDate' is set
        if (expiryDate == null) {
            throw new ApiException("Missing the required parameter 'expiryDate' when calling getExpiredOptionContracts(Async)");
        }
        
        com.squareup.okhttp.Call call = getExpiredOptionContractsCall(instrumentKey, expiryDate, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get expired option contracts
     * This API provides the functionality to retrieve the expired option contracts
     * @param instrumentKey Instrument key for an underlying symbol (required)
     * @param expiryDate Expiry date in format: YYYY-mm-dd (required)
     * @return GetOptionContractResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOptionContractResponse getExpiredOptionContracts(String instrumentKey, String expiryDate) throws ApiException {
        ApiResponse<GetOptionContractResponse> resp = getExpiredOptionContractsWithHttpInfo(instrumentKey, expiryDate);
        return resp.getData();
    }

    /**
     * Get expired option contracts
     * This API provides the functionality to retrieve the expired option contracts
     * @param instrumentKey Instrument key for an underlying symbol (required)
     * @param expiryDate Expiry date in format: YYYY-mm-dd (required)
     * @return ApiResponse&lt;GetOptionContractResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOptionContractResponse> getExpiredOptionContractsWithHttpInfo(String instrumentKey, String expiryDate) throws ApiException {
        com.squareup.okhttp.Call call = getExpiredOptionContractsValidateBeforeCall(instrumentKey, expiryDate, null, null);
        Type localVarReturnType = new TypeToken<GetOptionContractResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get expired option contracts (asynchronously)
     * This API provides the functionality to retrieve the expired option contracts
     * @param instrumentKey Instrument key for an underlying symbol (required)
     * @param expiryDate Expiry date in format: YYYY-mm-dd (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExpiredOptionContractsAsync(String instrumentKey, String expiryDate, final ApiCallback<GetOptionContractResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExpiredOptionContractsValidateBeforeCall(instrumentKey, expiryDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOptionContractResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExpiries
     * @param instrumentKey Instrument Key of asset (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExpiriesResponseCall(String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/expired-instruments/expiries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instrumentKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instrument_key", instrumentKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExpiriesResponseValidateBeforeCall(String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'instrumentKey' is set
        if (instrumentKey == null) {
            throw new ApiException("Missing the required parameter 'instrumentKey' when calling getExpiries(Async)");
        }
        
        com.squareup.okhttp.Call call = getExpiriesResponseCall(instrumentKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Expired instruments - Get expiries
     * This API provides the functionality to retrieve expiry dates for a given instrument key.
     * @param instrumentKey Instrument Key of asset (required)
     * @return GetExpiriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetExpiriesResponse getExpiries(String instrumentKey) throws ApiException {
        ApiResponse<GetExpiriesResponse> resp = getExpiriesResponseWithHttpInfo(instrumentKey);
        return resp.getData();
    }

    /**
     * Expired instruments - Get expiries
     * This API provides the functionality to retrieve expiry dates for a given instrument key.
     * @param instrumentKey Instrument Key of asset (required)
     * @return ApiResponse&lt;GetExpiriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetExpiriesResponse> getExpiriesResponseWithHttpInfo(String instrumentKey) throws ApiException {
        com.squareup.okhttp.Call call = getExpiriesResponseValidateBeforeCall(instrumentKey, null, null);
        Type localVarReturnType = new TypeToken<GetExpiriesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Expired instruments - Get expiries (asynchronously)
     * This API provides the functionality to retrieve expiry dates for a given instrument key.
     * @param instrumentKey Instrument Key of asset (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExpiriesResponseAsync(String instrumentKey, final ApiCallback<GetExpiriesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExpiriesResponseValidateBeforeCall(instrumentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetExpiriesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
