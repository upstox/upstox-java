/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.upstox.ApiCallback;
import com.upstox.ApiClient;
import com.upstox.ApiException;
import com.upstox.ApiResponse;
import com.upstox.Configuration;
import com.upstox.Pair;
import com.upstox.ProgressRequestBody;
import com.upstox.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.upstox.api.ApiGatewayErrorResponse;
import com.upstox.api.WebsocketAuthRedirectResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebsocketApi {
    private ApiClient apiClient;
    private boolean orderUpdate = true;
    private boolean positionUpdate = false;
    private boolean holdingUpdate = false;
    private boolean gttUpdate = false;

    public boolean isOrderUpdate() {
        return orderUpdate;
    }

    public void setOrderUpdate(boolean orderUpdate) {
        this.orderUpdate = orderUpdate;
    }

    public boolean isPositionUpdate() {
        return positionUpdate;
    }

    public void setPositionUpdate(boolean positionUpdate) {
        this.positionUpdate = positionUpdate;
    }

    public boolean isHoldingUpdate() {
        return holdingUpdate;
    }

    public void setHoldingUpdate(boolean holdingUpdate) {
        this.holdingUpdate = holdingUpdate;
    }

    public boolean isGttUpdate() {
        return gttUpdate;
    }

    public void setGttUpdate(boolean gttUpdate) {
        this.gttUpdate = gttUpdate;
    }

    public WebsocketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebsocketApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getMarketDataFeed
     * @param apiVersion API Version Header (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMarketDataFeedCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = apiVersion.equals("2.0")
                ? "/v2/feed/market-data-feed"
                : "/v3/feed/market-data-feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiVersion != null)
        localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketDataFeedValidateBeforeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMarketDataFeed(Async)");
        }
        
        com.squareup.okhttp.Call call = getMarketDataFeedCall(apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Market Data Feed
     *  This API redirects the client to the respective socket endpoint to receive Market updates.
     * @param apiVersion API Version Header (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getMarketDataFeed(String apiVersion) throws ApiException {
        getMarketDataFeedWithHttpInfo("2.0");
    }

    public void getMarketDataFeedV3() throws ApiException {
        getMarketDataFeedWithHttpInfo("3.0");
    }

    /**
     * Market Data Feed
     *  This API redirects the client to the respective socket endpoint to receive Market updates.
     * @param apiVersion API Version Header (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getMarketDataFeedWithHttpInfo(String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getMarketDataFeedValidateBeforeCall(apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Market Data Feed (asynchronously)
     *  This API redirects the client to the respective socket endpoint to receive Market updates.
     * @param apiVersion API Version Header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketDataFeedAsync(String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketDataFeedValidateBeforeCall(apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMarketDataFeedAuthorize
     * @param apiVersion API Version Header (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMarketDataFeedAuthorizeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        String localVarPath = apiVersion.equals("2.0")
                ? "/v2/feed/market-data-feed/authorize"
                : "/v3/feed/market-data-feed/authorize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiVersion != null)
        localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketDataFeedAuthorizeValidateBeforeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getMarketDataFeedAuthorize(Async)");
        }
        
        com.squareup.okhttp.Call call = getMarketDataFeedAuthorizeCall(apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Market Data Feed Authorize
     * This API provides the functionality to retrieve the socket endpoint URI for Market updates.
     * @param apiVersion API Version Header (required)
     * @return WebsocketAuthRedirectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebsocketAuthRedirectResponse getMarketDataFeedAuthorize(String apiVersion) throws ApiException {
        ApiResponse<WebsocketAuthRedirectResponse> resp = getMarketDataFeedAuthorizeWithHttpInfo("2.0");
        return resp.getData();
    }

    public WebsocketAuthRedirectResponse getMarketDataFeedAuthorizeV3() throws ApiException {
        ApiResponse<WebsocketAuthRedirectResponse> resp = getMarketDataFeedAuthorizeWithHttpInfo("3.0");
        return resp.getData();
    }
    /**
     * Market Data Feed Authorize
     * This API provides the functionality to retrieve the socket endpoint URI for Market updates.
     * @param apiVersion API Version Header (required)
     * @return ApiResponse&lt;WebsocketAuthRedirectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebsocketAuthRedirectResponse> getMarketDataFeedAuthorizeWithHttpInfo(String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getMarketDataFeedAuthorizeValidateBeforeCall(apiVersion, null, null);
        Type localVarReturnType = new TypeToken<WebsocketAuthRedirectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Market Data Feed Authorize (asynchronously)
     * This API provides the functionality to retrieve the socket endpoint URI for Market updates.
     * @param apiVersion API Version Header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketDataFeedAuthorizeAsync(String apiVersion, final ApiCallback<WebsocketAuthRedirectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketDataFeedAuthorizeValidateBeforeCall(apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebsocketAuthRedirectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioStreamFeed
     * @param apiVersion API Version Header (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioStreamFeedCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables

        String localVarPath = "/v2/feed/portfolio-stream-feed" + getPortfolioUrlParameters();


        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiVersion != null)
        localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    private String getPortfolioUrlParameters(){
        List<String> updateTypes = new ArrayList<>();
        if(this.orderUpdate) updateTypes.add("order");
        if(this.positionUpdate) updateTypes.add("position");
        if(this.holdingUpdate) updateTypes.add("holding");
        if(this.gttUpdate) updateTypes.add("gtt_order");
        if(updateTypes.isEmpty()) return "";
        String res = "?update_types=";
        for(int i=0;i<updateTypes.size()-1;i++){
            res += (updateTypes.get(i) + "%2C");
        }
        res += updateTypes.get(updateTypes.size()-1);
        return res;
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioStreamFeedValidateBeforeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPortfolioStreamFeed(Async)");
        }
        
        com.squareup.okhttp.Call call = getPortfolioStreamFeedCall(apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Portfolio Stream Feed
     * This API redirects the client to the respective socket endpoint to receive Portfolio updates.
     * @param apiVersion API Version Header (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void getPortfolioStreamFeed(String apiVersion) throws ApiException {
        getPortfolioStreamFeedWithHttpInfo(apiVersion);
    }

    /**
     * Portfolio Stream Feed
     * This API redirects the client to the respective socket endpoint to receive Portfolio updates.
     * @param apiVersion API Version Header (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> getPortfolioStreamFeedWithHttpInfo(String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioStreamFeedValidateBeforeCall(apiVersion, null, null);
        return apiClient.execute(call);
    }

    /**
     * Portfolio Stream Feed (asynchronously)
     * This API redirects the client to the respective socket endpoint to receive Portfolio updates.
     * @param apiVersion API Version Header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioStreamFeedAsync(String apiVersion, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioStreamFeedValidateBeforeCall(apiVersion, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPortfolioStreamFeedAuthorize
     * @param apiVersion API Version Header (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioStreamFeedAuthorizeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/feed/portfolio-stream-feed/authorize"+getPortfolioUrlParameters();


        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (apiVersion != null)
        localVarHeaderParams.put("Api-Version", apiClient.parameterToString(apiVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioStreamFeedAuthorizeValidateBeforeCall(String apiVersion, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPortfolioStreamFeedAuthorize(Async)");
        }
        
        com.squareup.okhttp.Call call = getPortfolioStreamFeedAuthorizeCall(apiVersion, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Portfolio Stream Feed Authorize
     *  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
     * @param apiVersion API Version Header (required)
     * @return WebsocketAuthRedirectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WebsocketAuthRedirectResponse getPortfolioStreamFeedAuthorize(String apiVersion) throws ApiException {
        ApiResponse<WebsocketAuthRedirectResponse> resp = getPortfolioStreamFeedAuthorizeWithHttpInfo(apiVersion);
        return resp.getData();
    }
    public WebsocketAuthRedirectResponse getPortfolioStreamFeedAuthorize(String apiVersion,boolean orderUpdate,boolean positionUpdate, boolean holdingUpdate) throws ApiException {
        this.orderUpdate = orderUpdate;
        this.positionUpdate = positionUpdate;
        this.holdingUpdate = holdingUpdate;
        ApiResponse<WebsocketAuthRedirectResponse> resp = getPortfolioStreamFeedAuthorizeWithHttpInfo(apiVersion);
        return resp.getData();
    }

    public WebsocketAuthRedirectResponse getPortfolioStreamFeedAuthorize(String apiVersion,boolean orderUpdate,boolean positionUpdate, boolean holdingUpdate, boolean gttUpdate) throws ApiException {
        this.orderUpdate = orderUpdate;
        this.positionUpdate = positionUpdate;
        this.holdingUpdate = holdingUpdate;
        this.gttUpdate = gttUpdate;
        ApiResponse<WebsocketAuthRedirectResponse> resp = getPortfolioStreamFeedAuthorizeWithHttpInfo(apiVersion);
        return resp.getData();
    }


    /**
     * Portfolio Stream Feed Authorize
     *  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
     * @param apiVersion API Version Header (required)
     * @return ApiResponse&lt;WebsocketAuthRedirectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WebsocketAuthRedirectResponse> getPortfolioStreamFeedAuthorizeWithHttpInfo(String apiVersion) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioStreamFeedAuthorizeValidateBeforeCall(apiVersion, null, null);
        Type localVarReturnType = new TypeToken<WebsocketAuthRedirectResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Portfolio Stream Feed Authorize (asynchronously)
     *  This API provides the functionality to retrieve the socket endpoint URI for Portfolio updates.
     * @param apiVersion API Version Header (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioStreamFeedAuthorizeAsync(String apiVersion, final ApiCallback<WebsocketAuthRedirectResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioStreamFeedAuthorizeValidateBeforeCall(apiVersion, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WebsocketAuthRedirectResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
