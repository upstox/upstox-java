/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import com.upstox.ApiCallback;
import com.upstox.ApiClient;
import com.upstox.ApiException;
import com.upstox.ApiResponse;
import com.upstox.Configuration;
import com.upstox.Pair;
import com.upstox.ProgressRequestBody;
import com.upstox.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.upstox.api.GetMarketQuoteLastTradedPriceResponseV3;
import com.upstox.api.GetMarketQuoteOHLCResponseV3;
import com.upstox.api.GetMarketQuoteOptionGreekResponseV3;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketQuoteV3Api {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public MarketQuoteV3Api() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketQuoteV3Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for getLtp
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLtpCall(String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/market-quote/ltp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instrumentKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instrument_key", instrumentKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLtpValidateBeforeCall(String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getLtpCall(instrumentKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Market quotes and instruments - LTP quotes.
     * This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 500 instruments in one go.
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @return GetMarketQuoteLastTradedPriceResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMarketQuoteLastTradedPriceResponseV3 getLtp(String instrumentKey) throws ApiException {
        ApiResponse<GetMarketQuoteLastTradedPriceResponseV3> resp = getLtpWithHttpInfo(instrumentKey);
        return resp.getData();
    }

    /**
     * Market quotes and instruments - LTP quotes.
     * This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 500 instruments in one go.
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @return ApiResponse&lt;GetMarketQuoteLastTradedPriceResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMarketQuoteLastTradedPriceResponseV3> getLtpWithHttpInfo(String instrumentKey) throws ApiException {
        com.squareup.okhttp.Call call = getLtpValidateBeforeCall(instrumentKey, null, null);
        Type localVarReturnType = new TypeToken<GetMarketQuoteLastTradedPriceResponseV3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Market quotes and instruments - LTP quotes. (asynchronously)
     * This API provides the functionality to retrieve the LTP quotes for one or more instruments.This API returns the LTPs of up to 500 instruments in one go.
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLtpAsync(String instrumentKey, final ApiCallback<GetMarketQuoteLastTradedPriceResponseV3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLtpValidateBeforeCall(instrumentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMarketQuoteLastTradedPriceResponseV3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMarketQuoteOHLC
     * @param interval Interval to get ohlc data (required)
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMarketQuoteOHLCV3Call(String interval, String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/market-quote/ohlc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instrumentKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instrument_key", instrumentKey));
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketQuoteOHLCV3ValidateBeforeCall(String interval, String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling getMarketQuoteOHLC(Async)");
        }
        
        com.squareup.okhttp.Call call = getMarketQuoteOHLCV3Call(interval, instrumentKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Market quotes and instruments - OHLC quotes
     * This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 500 instruments in one go.
     * @param interval Interval to get ohlc data (required)
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @return GetMarketQuoteOHLCResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMarketQuoteOHLCResponseV3 getMarketQuoteOHLC(String interval, String instrumentKey) throws ApiException {
        ApiResponse<GetMarketQuoteOHLCResponseV3> resp = getMarketQuoteOHLCV3WithHttpInfo(interval, instrumentKey);
        return resp.getData();
    }

    /**
     * Market quotes and instruments - OHLC quotes
     * This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 500 instruments in one go.
     * @param interval Interval to get ohlc data (required)
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @return ApiResponse&lt;GetMarketQuoteOHLCResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMarketQuoteOHLCResponseV3> getMarketQuoteOHLCV3WithHttpInfo(String interval, String instrumentKey) throws ApiException {
        com.squareup.okhttp.Call call = getMarketQuoteOHLCV3ValidateBeforeCall(interval, instrumentKey, null, null);
        Type localVarReturnType = new TypeToken<GetMarketQuoteOHLCResponseV3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Market quotes and instruments - OHLC quotes (asynchronously)
     * This API provides the functionality to retrieve the OHLC quotes for one or more instruments.This API returns the OHLC snapshots of up to 500 instruments in one go.
     * @param interval Interval to get ohlc data (required)
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketQuoteOHLCV3Async(String interval, String instrumentKey, final ApiCallback<GetMarketQuoteOHLCResponseV3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketQuoteOHLCV3ValidateBeforeCall(interval, instrumentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMarketQuoteOHLCResponseV3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMarketQuoteOptionGreek
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMarketQuoteOptionGreekCall(String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v3/market-quote/option-greek";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (instrumentKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("instrument_key", instrumentKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAUTH2" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketQuoteOptionGreekValidateBeforeCall(String instrumentKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getMarketQuoteOptionGreekCall(instrumentKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Market quotes and instruments - Option Greek
     * This API provides the functionality to retrieve the Option Greek data for one or more instruments.This API returns the Option Greek data of up to 500 instruments in one go.
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @return GetMarketQuoteOptionGreekResponseV3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMarketQuoteOptionGreekResponseV3 getMarketQuoteOptionGreek(String instrumentKey) throws ApiException {
        ApiResponse<GetMarketQuoteOptionGreekResponseV3> resp = getMarketQuoteOptionGreekWithHttpInfo(instrumentKey);
        return resp.getData();
    }

    /**
     * Market quotes and instruments - Option Greek
     * This API provides the functionality to retrieve the Option Greek data for one or more instruments.This API returns the Option Greek data of up to 500 instruments in one go.
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @return ApiResponse&lt;GetMarketQuoteOptionGreekResponseV3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMarketQuoteOptionGreekResponseV3> getMarketQuoteOptionGreekWithHttpInfo(String instrumentKey) throws ApiException {
        com.squareup.okhttp.Call call = getMarketQuoteOptionGreekValidateBeforeCall(instrumentKey, null, null);
        Type localVarReturnType = new TypeToken<GetMarketQuoteOptionGreekResponseV3>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Market quotes and instruments - Option Greek (asynchronously)
     * This API provides the functionality to retrieve the Option Greek data for one or more instruments.This API returns the Option Greek data of up to 500 instruments in one go.
     * @param instrumentKey Comma separated list of instrument keys (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketQuoteOptionGreekAsync(String instrumentKey, final ApiCallback<GetMarketQuoteOptionGreekResponseV3> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMarketQuoteOptionGreekValidateBeforeCall(instrumentKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMarketQuoteOptionGreekResponseV3>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
