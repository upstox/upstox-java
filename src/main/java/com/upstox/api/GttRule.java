/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * List of rules defining the conditions for each leg in the GTT order
 */
@Schema(description = "List of rules defining the conditions for each leg in the GTT order")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-04T13:05:45.049908+05:30[Asia/Kolkata]")

public class GttRule {
  /**
   * Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order
   */
  @JsonAdapter(StrategyEnum.Adapter.class)
  public enum StrategyEnum {
    @SerializedName("ENTRY")
    ENTRY("ENTRY"),
    @SerializedName("STOPLOSS")
    STOPLOSS("STOPLOSS"),
    @SerializedName("TARGET")
    TARGET("TARGET");

    private String value;

    StrategyEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StrategyEnum fromValue(String input) {
      for (StrategyEnum b : StrategyEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StrategyEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StrategyEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StrategyEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("strategy")
  private StrategyEnum strategy = null;

  /**
   * Trigger type for each leg of the order
   */
  @JsonAdapter(TriggerTypeEnum.Adapter.class)
  public enum TriggerTypeEnum {
    @SerializedName("ABOVE")
    ABOVE("ABOVE"),
    @SerializedName("BELOW")
    BELOW("BELOW"),
    @SerializedName("IMMEDIATE")
    IMMEDIATE("IMMEDIATE");

    private String value;

    TriggerTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TriggerTypeEnum fromValue(String input) {
      for (TriggerTypeEnum b : TriggerTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TriggerTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("trigger_type")
  private TriggerTypeEnum triggerType = null;

  @SerializedName("trigger_price")
  private Double triggerPrice = null;

  @SerializedName("trailing_gap")
  private Double trailingGap = null;

  public GttRule strategy(StrategyEnum strategy) {
    this.strategy = strategy;
    return this;
  }

   /**
   * Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order
   * @return strategy
  **/
  @Schema(example = "ENTRY", required = true, description = "Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order")
  public StrategyEnum getStrategy() {
    return strategy;
  }

  public void setStrategy(StrategyEnum strategy) {
    this.strategy = strategy;
  }

  public GttRule triggerType(TriggerTypeEnum triggerType) {
    this.triggerType = triggerType;
    return this;
  }

   /**
   * Trigger type for each leg of the order
   * @return triggerType
  **/
  @Schema(example = "ABOVE", required = true, description = "Trigger type for each leg of the order")
  public TriggerTypeEnum getTriggerType() {
    return triggerType;
  }

  public void setTriggerType(TriggerTypeEnum triggerType) {
    this.triggerType = triggerType;
  }

  public GttRule triggerPrice(Double triggerPrice) {
    this.triggerPrice = triggerPrice;
    return this;
  }

   /**
   * Trigger price for the GTT order leg
   * @return triggerPrice
  **/
  @Schema(example = "1500.5", required = true, description = "Trigger price for the GTT order leg")
  public Double getTriggerPrice() {
    return triggerPrice;
  }

  public void setTriggerPrice(Double triggerPrice) {
    this.triggerPrice = triggerPrice;
  }

  public GttRule trailingGap(Double trailingGap) {
    this.trailingGap = trailingGap;
    return this;
  }

   /**
   * Optional parameter defining the trailing gap for the GTT order
   * @return trailingGap
  **/
  @Schema(example = "0.5", description = "Optional parameter defining the trailing gap for the GTT order")
  public Double getTrailingGap() {
    return trailingGap;
  }

  public void setTrailingGap(Double trailingGap) {
    this.trailingGap = trailingGap;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GttRule gttRule = (GttRule) o;
    return Objects.equals(this.strategy, gttRule.strategy) &&
        Objects.equals(this.triggerType, gttRule.triggerType) &&
        Objects.equals(this.triggerPrice, gttRule.triggerPrice) &&
        Objects.equals(this.trailingGap, gttRule.trailingGap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(strategy, triggerType, triggerPrice, trailingGap);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GttRule {\n");
    
    sb.append("    strategy: ").append(toIndentedString(strategy)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    triggerPrice: ").append(toIndentedString(triggerPrice)).append("\n");
    sb.append("    trailingGap: ").append(toIndentedString(trailingGap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
