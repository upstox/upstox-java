/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Execution summary for multi order request
 */
@Schema(description = "Execution summary for multi order request")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-10-09T09:11:10.678079+05:30[Asia/Kolkata]")

public class MultiOrderSummary {
  @SerializedName("total")
  private Integer total = null;

  @SerializedName("success")
  private Integer success = null;

  @SerializedName("error")
  private Integer error = null;

  @SerializedName("payload_error")
  private Integer payloadError = null;

   /**
   * The total number of order lines present in the payload.
   * @return total
  **/
  @Schema(example = "3", description = "The total number of order lines present in the payload.")
  public Integer getTotal() {
    return total;
  }

   /**
   * The number of order lines that were successfully placed without any errors.
   * @return success
  **/
  @Schema(example = "2", description = "The number of order lines that were successfully placed without any errors.")
  public Integer getSuccess() {
    return success;
  }

   /**
   * The number of order lines that encountered errors during processing, despite their payloads being valid.
   * @return error
  **/
  @Schema(example = "1", description = "The number of order lines that encountered errors during processing, despite their payloads being valid.")
  public Integer getError() {
    return error;
  }

   /**
   * The number of order lines with payload errors, indicating formatting or data validity issues.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;Note&lt;/b&gt;: Orders are processed only if the entire batch is free of payload_error, ensuring error-free transactions.
   * @return payloadError
  **/
  @Schema(example = "0", description = "The number of order lines with payload errors, indicating formatting or data validity issues.<br/><br/><b>Note</b>: Orders are processed only if the entire batch is free of payload_error, ensuring error-free transactions.")
  public Integer getPayloadError() {
    return payloadError;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiOrderSummary multiOrderSummary = (MultiOrderSummary) o;
    return Objects.equals(this.total, multiOrderSummary.total) &&
        Objects.equals(this.success, multiOrderSummary.success) &&
        Objects.equals(this.error, multiOrderSummary.error) &&
        Objects.equals(this.payloadError, multiOrderSummary.payloadError);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, success, error, payloadError);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiOrderSummary {\n");
    
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    payloadError: ").append(toIndentedString(payloadError)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
