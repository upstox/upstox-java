/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * OhlcV3
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-05-11T15:38:03.274098+05:30[Asia/Kolkata]")

public class OhlcV3 {
  @SerializedName("open")
  private Double open = null;

  @SerializedName("high")
  private Double high = null;

  @SerializedName("low")
  private Double low = null;

  @SerializedName("close")
  private Double close = null;

  @SerializedName("volume")
  private Long volume = null;

  @SerializedName("ts")
  private Long ts = null;

   /**
   * The open price of the trading session
   * @return open
  **/
  @Schema(example = "120.01", description = "The open price of the trading session")
  public Double getOpen() {
    return open;
  }

   /**
   * The high price of the trading session
   * @return high
  **/
  @Schema(example = "121.0", description = "The high price of the trading session")
  public Double getHigh() {
    return high;
  }

   /**
   * The low price of the trading session
   * @return low
  **/
  @Schema(example = "119.0", description = "The low price of the trading session")
  public Double getLow() {
    return low;
  }

   /**
   * The close price of the symbol from the previous session of trading
   * @return close
  **/
  @Schema(example = "120.0", description = "The close price of the symbol from the previous session of trading")
  public Double getClose() {
    return close;
  }

   /**
   * The volume of the symbol traded in the session
   * @return volume
  **/
  @Schema(example = "2589075", description = "The volume of the symbol traded in the session")
  public Long getVolume() {
    return volume;
  }

   /**
   * Starting timestamp of candle
   * @return ts
  **/
  @Schema(example = "1743750900000", description = "Starting timestamp of candle")
  public Long getTs() {
    return ts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OhlcV3 ohlcV3 = (OhlcV3) o;
    return Objects.equals(this.open, ohlcV3.open) &&
        Objects.equals(this.high, ohlcV3.high) &&
        Objects.equals(this.low, ohlcV3.low) &&
        Objects.equals(this.close, ohlcV3.close) &&
        Objects.equals(this.volume, ohlcV3.volume) &&
        Objects.equals(this.ts, ohlcV3.ts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(open, high, low, close, volume, ts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OhlcV3 {\n");
    
    sb.append("    open: ").append(toIndentedString(open)).append("\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    close: ").append(toIndentedString(close)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
