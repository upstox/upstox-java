/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ExpiredFutureData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-05-11T15:38:03.274098+05:30[Asia/Kolkata]")

public class ExpiredFutureData {
  @SerializedName("name")
  private String name = null;

  @SerializedName("segment")
  private String segment = null;

  @SerializedName("exchange")
  private String exchange = null;

  @SerializedName("expiry")
  private String expiry = null;

  @SerializedName("instrument_key")
  private String instrumentKey = null;

  @SerializedName("exchange_token")
  private String exchangeToken = null;

  @SerializedName("trading_symbol")
  private String tradingSymbol = null;

  @SerializedName("tick_size")
  private Double tickSize = null;

  @SerializedName("lot_size")
  private Long lotSize = null;

  @SerializedName("instrument_type")
  private String instrumentType = null;

  @SerializedName("freeze_quantity")
  private Double freezeQuantity = null;

  @SerializedName("underlying_key")
  private String underlyingKey = null;

  @SerializedName("underlying_type")
  private String underlyingType = null;

  @SerializedName("underlying_symbol")
  private String underlyingSymbol = null;

  @SerializedName("minimum_lot")
  private Long minimumLot = null;

  public ExpiredFutureData name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the instrument
   * @return name
  **/
  @Schema(example = "NIFTY", description = "Name of the instrument")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ExpiredFutureData segment(String segment) {
    this.segment = segment;
    return this;
  }

   /**
   * Segment of the instrument
   * @return segment
  **/
  @Schema(example = "NSE_FO", description = "Segment of the instrument")
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }

  public ExpiredFutureData exchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Exchange of the instrument
   * @return exchange
  **/
  @Schema(example = "NSE", description = "Exchange of the instrument")
  public String getExchange() {
    return exchange;
  }

  public void setExchange(String exchange) {
    this.exchange = exchange;
  }

  public ExpiredFutureData expiry(String expiry) {
    this.expiry = expiry;
    return this;
  }

   /**
   * Expiry date of the instrument
   * @return expiry
  **/
  @Schema(example = "2024-12-26", description = "Expiry date of the instrument")
  public String getExpiry() {
    return expiry;
  }

  public void setExpiry(String expiry) {
    this.expiry = expiry;
  }

  public ExpiredFutureData instrumentKey(String instrumentKey) {
    this.instrumentKey = instrumentKey;
    return this;
  }

   /**
   * Unique key identifying the instrument
   * @return instrumentKey
  **/
  @Schema(example = "NSE_FO|35005", description = "Unique key identifying the instrument")
  public String getInstrumentKey() {
    return instrumentKey;
  }

  public void setInstrumentKey(String instrumentKey) {
    this.instrumentKey = instrumentKey;
  }

  public ExpiredFutureData exchangeToken(String exchangeToken) {
    this.exchangeToken = exchangeToken;
    return this;
  }

   /**
   * Token assigned by the exchange
   * @return exchangeToken
  **/
  @Schema(example = "35005", description = "Token assigned by the exchange")
  public String getExchangeToken() {
    return exchangeToken;
  }

  public void setExchangeToken(String exchangeToken) {
    this.exchangeToken = exchangeToken;
  }

  public ExpiredFutureData tradingSymbol(String tradingSymbol) {
    this.tradingSymbol = tradingSymbol;
    return this;
  }

   /**
   * Symbol used for trading
   * @return tradingSymbol
  **/
  @Schema(example = "NIFTY FUT 26 DEC 24", description = "Symbol used for trading")
  public String getTradingSymbol() {
    return tradingSymbol;
  }

  public void setTradingSymbol(String tradingSymbol) {
    this.tradingSymbol = tradingSymbol;
  }

  public ExpiredFutureData tickSize(Double tickSize) {
    this.tickSize = tickSize;
    return this;
  }

   /**
   * Minimum price movement
   * @return tickSize
  **/
  @Schema(example = "5", description = "Minimum price movement")
  public Double getTickSize() {
    return tickSize;
  }

  public void setTickSize(Double tickSize) {
    this.tickSize = tickSize;
  }

  public ExpiredFutureData lotSize(Long lotSize) {
    this.lotSize = lotSize;
    return this;
  }

   /**
   * Number of units per lot
   * @return lotSize
  **/
  @Schema(example = "25", description = "Number of units per lot")
  public Long getLotSize() {
    return lotSize;
  }

  public void setLotSize(Long lotSize) {
    this.lotSize = lotSize;
  }

  public ExpiredFutureData instrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
    return this;
  }

   /**
   * Type of the instrument
   * @return instrumentType
  **/
  @Schema(example = "FUT", description = "Type of the instrument")
  public String getInstrumentType() {
    return instrumentType;
  }

  public void setInstrumentType(String instrumentType) {
    this.instrumentType = instrumentType;
  }

  public ExpiredFutureData freezeQuantity(Double freezeQuantity) {
    this.freezeQuantity = freezeQuantity;
    return this;
  }

   /**
   * Maximum allowed quantity
   * @return freezeQuantity
  **/
  @Schema(example = "1800", description = "Maximum allowed quantity")
  public Double getFreezeQuantity() {
    return freezeQuantity;
  }

  public void setFreezeQuantity(Double freezeQuantity) {
    this.freezeQuantity = freezeQuantity;
  }

  public ExpiredFutureData underlyingKey(String underlyingKey) {
    this.underlyingKey = underlyingKey;
    return this;
  }

   /**
   * Key of the underlying asset
   * @return underlyingKey
  **/
  @Schema(example = "NSE_INDEX|Nifty 50", description = "Key of the underlying asset")
  public String getUnderlyingKey() {
    return underlyingKey;
  }

  public void setUnderlyingKey(String underlyingKey) {
    this.underlyingKey = underlyingKey;
  }

  public ExpiredFutureData underlyingType(String underlyingType) {
    this.underlyingType = underlyingType;
    return this;
  }

   /**
   * Type of the underlying asset
   * @return underlyingType
  **/
  @Schema(example = "INDEX", description = "Type of the underlying asset")
  public String getUnderlyingType() {
    return underlyingType;
  }

  public void setUnderlyingType(String underlyingType) {
    this.underlyingType = underlyingType;
  }

  public ExpiredFutureData underlyingSymbol(String underlyingSymbol) {
    this.underlyingSymbol = underlyingSymbol;
    return this;
  }

   /**
   * Symbol of the underlying asset
   * @return underlyingSymbol
  **/
  @Schema(example = "NIFTY", description = "Symbol of the underlying asset")
  public String getUnderlyingSymbol() {
    return underlyingSymbol;
  }

  public void setUnderlyingSymbol(String underlyingSymbol) {
    this.underlyingSymbol = underlyingSymbol;
  }

  public ExpiredFutureData minimumLot(Long minimumLot) {
    this.minimumLot = minimumLot;
    return this;
  }

   /**
   * Minimum lot size
   * @return minimumLot
  **/
  @Schema(example = "25", description = "Minimum lot size")
  public Long getMinimumLot() {
    return minimumLot;
  }

  public void setMinimumLot(Long minimumLot) {
    this.minimumLot = minimumLot;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpiredFutureData expiredFutureData = (ExpiredFutureData) o;
    return Objects.equals(this.name, expiredFutureData.name) &&
        Objects.equals(this.segment, expiredFutureData.segment) &&
        Objects.equals(this.exchange, expiredFutureData.exchange) &&
        Objects.equals(this.expiry, expiredFutureData.expiry) &&
        Objects.equals(this.instrumentKey, expiredFutureData.instrumentKey) &&
        Objects.equals(this.exchangeToken, expiredFutureData.exchangeToken) &&
        Objects.equals(this.tradingSymbol, expiredFutureData.tradingSymbol) &&
        Objects.equals(this.tickSize, expiredFutureData.tickSize) &&
        Objects.equals(this.lotSize, expiredFutureData.lotSize) &&
        Objects.equals(this.instrumentType, expiredFutureData.instrumentType) &&
        Objects.equals(this.freezeQuantity, expiredFutureData.freezeQuantity) &&
        Objects.equals(this.underlyingKey, expiredFutureData.underlyingKey) &&
        Objects.equals(this.underlyingType, expiredFutureData.underlyingType) &&
        Objects.equals(this.underlyingSymbol, expiredFutureData.underlyingSymbol) &&
        Objects.equals(this.minimumLot, expiredFutureData.minimumLot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, segment, exchange, expiry, instrumentKey, exchangeToken, tradingSymbol, tickSize, lotSize, instrumentType, freezeQuantity, underlyingKey, underlyingType, underlyingSymbol, minimumLot);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpiredFutureData {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    instrumentKey: ").append(toIndentedString(instrumentKey)).append("\n");
    sb.append("    exchangeToken: ").append(toIndentedString(exchangeToken)).append("\n");
    sb.append("    tradingSymbol: ").append(toIndentedString(tradingSymbol)).append("\n");
    sb.append("    tickSize: ").append(toIndentedString(tickSize)).append("\n");
    sb.append("    lotSize: ").append(toIndentedString(lotSize)).append("\n");
    sb.append("    instrumentType: ").append(toIndentedString(instrumentType)).append("\n");
    sb.append("    freezeQuantity: ").append(toIndentedString(freezeQuantity)).append("\n");
    sb.append("    underlyingKey: ").append(toIndentedString(underlyingKey)).append("\n");
    sb.append("    underlyingType: ").append(toIndentedString(underlyingType)).append("\n");
    sb.append("    underlyingSymbol: ").append(toIndentedString(underlyingSymbol)).append("\n");
    sb.append("    minimumLot: ").append(toIndentedString(minimumLot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
