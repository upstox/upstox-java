/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues. 
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Problem
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-12T20:29:09.823661+05:30[Asia/Kolkata]")

public class Problem {

  @SerializedName("message")
  private String message = null;

  @SerializedName("error_code")
  private String errorCode = null;

  @SerializedName("property_path")
  private String propertyPath = null;

  @SerializedName("invalid_value")
  private Object invalidValue = null;

  public Problem errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Unique code for the error state
   * @return errorCode
  **/
  @Schema(description = "Unique code for the error state")
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }

  public Problem message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Verbose message for the error state
   * @return message
  **/
  @Schema(description = "Verbose message for the error state")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public Problem propertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
    return this;
  }

   /**
   * Path to property failing validation
   * @return propertyPath
  **/
  @Schema(description = "Path to property failing validation")
  public String getPropertyPath() {
    return propertyPath;
  }

  public void setPropertyPath(String propertyPath) {
    this.propertyPath = propertyPath;
  }

  public Problem invalidValue(Object invalidValue) {
    this.invalidValue = invalidValue;
    return this;
  }

   /**
   * Invalid value for the property failing validation
   * @return invalidValue
  **/
  @Schema(description = "Invalid value for the property failing validation")
  public Object getInvalidValue() {
    return invalidValue;
  }

  public void setInvalidValue(Object invalidValue) {
    this.invalidValue = invalidValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Problem problem = (Problem) o;
    return Objects.equals(this.errorCode, problem.errorCode) &&
        Objects.equals(this.message, problem.message) &&
        Objects.equals(this.propertyPath, problem.propertyPath) &&
        Objects.equals(this.invalidValue, problem.invalidValue) &&
        Objects.equals(this.errorCode, problem.errorCode) &&
        Objects.equals(this.propertyPath, problem.propertyPath) &&
        Objects.equals(this.invalidValue, problem.invalidValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorCode, message, propertyPath, invalidValue, errorCode, propertyPath, invalidValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Problem {\n");
    
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("    invalidValue: ").append(toIndentedString(invalidValue)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    propertyPath: ").append(toIndentedString(propertyPath)).append("\n");
    sb.append("    invalidValue: ").append(toIndentedString(invalidValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
