/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.upstox.api.GttRule;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * GttModifyOrderRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-04T13:05:45.049908+05:30[Asia/Kolkata]")

public class GttModifyOrderRequest {
  /**
   * Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("SINGLE")
    SINGLE("SINGLE"),
    @SerializedName("MULTIPLE")
    MULTIPLE("MULTIPLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("quantity")
  private Integer quantity = null;

  @SerializedName("rules")
  private List<GttRule> rules = new ArrayList<GttRule>();

  @SerializedName("gtt_order_id")
  private String gttOrderId = null;

  public GttModifyOrderRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order
   * @return type
  **/
  @Schema(example = "SINGLE", required = true, description = "Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public GttModifyOrderRequest quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity with which the order is to be placed
   * @return quantity
  **/
  @Schema(example = "1", required = true, description = "Quantity with which the order is to be placed")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public GttModifyOrderRequest rules(List<GttRule> rules) {
    this.rules = rules;
    return this;
  }

  public GttModifyOrderRequest addRulesItem(GttRule rulesItem) {
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * List of rules defining the conditions for each leg in the GTT order
   * @return rules
  **/
  @Schema(required = true, description = "List of rules defining the conditions for each leg in the GTT order")
  public List<GttRule> getRules() {
    return rules;
  }

  public void setRules(List<GttRule> rules) {
    this.rules = rules;
  }

  public GttModifyOrderRequest gttOrderId(String gttOrderId) {
    this.gttOrderId = gttOrderId;
    return this;
  }

   /**
   * Unique identifier of the GTT order to be modified
   * @return gttOrderId
  **/
  @Schema(example = "GTT-12345678", required = true, description = "Unique identifier of the GTT order to be modified")
  public String getGttOrderId() {
    return gttOrderId;
  }

  public void setGttOrderId(String gttOrderId) {
    this.gttOrderId = gttOrderId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GttModifyOrderRequest gttModifyOrderRequest = (GttModifyOrderRequest) o;
    return Objects.equals(this.type, gttModifyOrderRequest.type) &&
        Objects.equals(this.quantity, gttModifyOrderRequest.quantity) &&
        Objects.equals(this.rules, gttModifyOrderRequest.rules) &&
        Objects.equals(this.gttOrderId, gttModifyOrderRequest.gttOrderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, quantity, rules, gttOrderId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GttModifyOrderRequest {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    gttOrderId: ").append(toIndentedString(gttOrderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
