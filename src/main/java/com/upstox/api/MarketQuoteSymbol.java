/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues. 
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.upstox.api.DepthMap;
import com.upstox.api.Ohlc;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * MarketQuoteSymbol
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-12T20:29:09.823661+05:30[Asia/Kolkata]")

public class MarketQuoteSymbol {
  @SerializedName("ohlc")
  private Ohlc ohlc = null;

  @SerializedName("depth")
  private DepthMap depth = null;

  @SerializedName("timestamp")
  private String timestamp = null;

  @SerializedName("instrument_token")
  private String instrumentToken = null;

  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("last_price")
  private Double lastPrice = null;

  @SerializedName("volume")
  private Long volume = null;

  @SerializedName("average_price")
  private Double averagePrice = null;

  @SerializedName("oi")
  private Double oi = null;

  @SerializedName("net_change")
  private Double netChange = null;

  @SerializedName("total_buy_quantity")
  private Double totalBuyQuantity = null;

  @SerializedName("total_sell_quantity")
  private Double totalSellQuantity = null;

  @SerializedName("lower_circuit_limit")
  private Double lowerCircuitLimit = null;

  @SerializedName("upper_circuit_limit")
  private Double upperCircuitLimit = null;

  @SerializedName("last_trade_time")
  private String lastTradeTime = null;

  @SerializedName("oi_day_high")
  private Double oiDayHigh = null;

  @SerializedName("oi_day_low")
  private Double oiDayLow = null;

  public MarketQuoteSymbol ohlc(Ohlc ohlc) {
    this.ohlc = ohlc;
    return this;
  }

   /**
   * Get ohlc
   * @return ohlc
  **/
  @Schema(description = "")
  public Ohlc getOhlc() {
    return ohlc;
  }

  public void setOhlc(Ohlc ohlc) {
    this.ohlc = ohlc;
  }

  public MarketQuoteSymbol depth(DepthMap depth) {
    this.depth = depth;
    return this;
  }

   /**
   * Get depth
   * @return depth
  **/
  @Schema(description = "")
  public DepthMap getDepth() {
    return depth;
  }

  public void setDepth(DepthMap depth) {
    this.depth = depth;
  }

   /**
   * Time in milliseconds at which the feeds was updated
   * @return timestamp
  **/
  @Schema(example = "2022-11-16 06:14:48", description = "Time in milliseconds at which the feeds was updated")
  public String getTimestamp() {
    return timestamp;
  }

   /**
   * Key issued by Upstox for the instrument
   * @return instrumentToken
  **/
  @Schema(example = "NSE_EQ|INE160A01022", description = "Key issued by Upstox for the instrument")
  public String getInstrumentToken() {
    return instrumentToken;
  }

   /**
   * Shows the trading symbol of the instrument
   * @return symbol
  **/
  @Schema(example = "NHPC", description = "Shows the trading symbol of the instrument")
  public String getSymbol() {
    return symbol;
  }

   /**
   * The last traded price of symbol
   * @return lastPrice
  **/
  @Schema(example = "120.01", description = "The last traded price of symbol")
  public Double getLastPrice() {
    return lastPrice;
  }

   /**
   * The volume traded today on symbol
   * @return volume
  **/
  @Schema(example = "2344451", description = "The volume traded today on symbol")
  public Long getVolume() {
    return volume;
  }

   /**
   * Average price
   * @return averagePrice
  **/
  @Schema(example = "120.01", description = "Average price")
  public Double getAveragePrice() {
    return averagePrice;
  }

   /**
   * Total number of outstanding contracts held by market participants exchange-wide (only F&amp;O)
   * @return oi
  **/
  @Schema(example = "0", description = "Total number of outstanding contracts held by market participants exchange-wide (only F&O)")
  public Double getOi() {
    return oi;
  }

   /**
   * The absolute change from yesterday&#x27;s close to last traded price
   * @return netChange
  **/
  @Schema(example = "0.01", description = "The absolute change from yesterday's close to last traded price")
  public Double getNetChange() {
    return netChange;
  }

   /**
   * The total number of bid quantity available for trading
   * @return totalBuyQuantity
  **/
  @Schema(example = "0", description = "The total number of bid quantity available for trading")
  public Double getTotalBuyQuantity() {
    return totalBuyQuantity;
  }

   /**
   * The total number of ask quantity available for trading
   * @return totalSellQuantity
  **/
  @Schema(example = "0", description = "The total number of ask quantity available for trading")
  public Double getTotalSellQuantity() {
    return totalSellQuantity;
  }

   /**
   * The lower circuit of symbol
   * @return lowerCircuitLimit
  **/
  @Schema(example = "119.0", description = "The lower circuit of symbol")
  public Double getLowerCircuitLimit() {
    return lowerCircuitLimit;
  }

   /**
   * The upper circuit of symbol
   * @return upperCircuitLimit
  **/
  @Schema(example = "121.0", description = "The upper circuit of symbol")
  public Double getUpperCircuitLimit() {
    return upperCircuitLimit;
  }

   /**
   * Time in milliseconds at which last trade happened
   * @return lastTradeTime
  **/
  @Schema(example = "2022-11-16 06:14:48", description = "Time in milliseconds at which last trade happened")
  public String getLastTradeTime() {
    return lastTradeTime;
  }

   /**
   * Get oiDayHigh
   * @return oiDayHigh
  **/
  @Schema(example = "0", description = "")
  public Double getOiDayHigh() {
    return oiDayHigh;
  }

   /**
   * Get oiDayLow
   * @return oiDayLow
  **/
  @Schema(example = "0", description = "")
  public Double getOiDayLow() {
    return oiDayLow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarketQuoteSymbol marketQuoteSymbol = (MarketQuoteSymbol) o;
    return Objects.equals(this.ohlc, marketQuoteSymbol.ohlc) &&
        Objects.equals(this.depth, marketQuoteSymbol.depth) &&
        Objects.equals(this.timestamp, marketQuoteSymbol.timestamp) &&
        Objects.equals(this.instrumentToken, marketQuoteSymbol.instrumentToken) &&
        Objects.equals(this.symbol, marketQuoteSymbol.symbol) &&
        Objects.equals(this.lastPrice, marketQuoteSymbol.lastPrice) &&
        Objects.equals(this.volume, marketQuoteSymbol.volume) &&
        Objects.equals(this.averagePrice, marketQuoteSymbol.averagePrice) &&
        Objects.equals(this.oi, marketQuoteSymbol.oi) &&
        Objects.equals(this.netChange, marketQuoteSymbol.netChange) &&
        Objects.equals(this.totalBuyQuantity, marketQuoteSymbol.totalBuyQuantity) &&
        Objects.equals(this.totalSellQuantity, marketQuoteSymbol.totalSellQuantity) &&
        Objects.equals(this.lowerCircuitLimit, marketQuoteSymbol.lowerCircuitLimit) &&
        Objects.equals(this.upperCircuitLimit, marketQuoteSymbol.upperCircuitLimit) &&
        Objects.equals(this.lastTradeTime, marketQuoteSymbol.lastTradeTime) &&
        Objects.equals(this.oiDayHigh, marketQuoteSymbol.oiDayHigh) &&
        Objects.equals(this.oiDayLow, marketQuoteSymbol.oiDayLow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ohlc, depth, timestamp, instrumentToken, symbol, lastPrice, volume, averagePrice, oi, netChange, totalBuyQuantity, totalSellQuantity, lowerCircuitLimit, upperCircuitLimit, lastTradeTime, oiDayHigh, oiDayLow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarketQuoteSymbol {\n");
    
    sb.append("    ohlc: ").append(toIndentedString(ohlc)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    instrumentToken: ").append(toIndentedString(instrumentToken)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    averagePrice: ").append(toIndentedString(averagePrice)).append("\n");
    sb.append("    oi: ").append(toIndentedString(oi)).append("\n");
    sb.append("    netChange: ").append(toIndentedString(netChange)).append("\n");
    sb.append("    totalBuyQuantity: ").append(toIndentedString(totalBuyQuantity)).append("\n");
    sb.append("    totalSellQuantity: ").append(toIndentedString(totalSellQuantity)).append("\n");
    sb.append("    lowerCircuitLimit: ").append(toIndentedString(lowerCircuitLimit)).append("\n");
    sb.append("    upperCircuitLimit: ").append(toIndentedString(upperCircuitLimit)).append("\n");
    sb.append("    lastTradeTime: ").append(toIndentedString(lastTradeTime)).append("\n");
    sb.append("    oiDayHigh: ").append(toIndentedString(oiDayHigh)).append("\n");
    sb.append("    oiDayLow: ").append(toIndentedString(oiDayLow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
