/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues. 
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Response data for Balance
 */
@Schema(description = "Response data for Balance")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-12T20:29:09.823661+05:30[Asia/Kolkata]")

public class UserFundMarginData {
  @SerializedName("used_margin")
  private Float usedMargin = null;

  @SerializedName("payin_amount")
  private Float payinAmount = null;

  @SerializedName("span_margin")
  private Float spanMargin = null;

  @SerializedName("adhoc_margin")
  private Float adhocMargin = null;

  @SerializedName("notional_cash")
  private Float notionalCash = null;

  @SerializedName("available_margin")
  private Float availableMargin = null;

  @SerializedName("exposure_margin")
  private Float exposureMargin = null;

   /**
   * Positive values denote the amount blocked into an Open order or position.  Negative value denotes the amount being released.
   * @return usedMargin
  **/
  @Schema(example = "120.01", description = "Positive values denote the amount blocked into an Open order or position.  Negative value denotes the amount being released.")
  public Float getUsedMargin() {
    return usedMargin;
  }

   /**
   * Instant payin will reflect here
   * @return payinAmount
  **/
  @Schema(example = "0", description = "Instant payin will reflect here")
  public Float getPayinAmount() {
    return payinAmount;
  }

   /**
   * Amount blocked on futures and options towards SPAN
   * @return spanMargin
  **/
  @Schema(example = "0", description = "Amount blocked on futures and options towards SPAN")
  public Float getSpanMargin() {
    return spanMargin;
  }

   /**
   * Payin amount credited through a manual process
   * @return adhocMargin
  **/
  @Schema(example = "0", description = "Payin amount credited through a manual process")
  public Float getAdhocMargin() {
    return adhocMargin;
  }

   /**
   * The amount maintained for withdrawal
   * @return notionalCash
  **/
  @Schema(example = "0", description = "The amount maintained for withdrawal")
  public Float getNotionalCash() {
    return notionalCash;
  }

   /**
   * Total margin available for trading
   * @return availableMargin
  **/
  @Schema(example = "200.0", description = "Total margin available for trading")
  public Float getAvailableMargin() {
    return availableMargin;
  }

   /**
   * Amount blocked on futures and options towards Exposure
   * @return exposureMargin
  **/
  @Schema(example = "0", description = "Amount blocked on futures and options towards Exposure")
  public Float getExposureMargin() {
    return exposureMargin;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserFundMarginData userFundMarginData = (UserFundMarginData) o;
    return Objects.equals(this.usedMargin, userFundMarginData.usedMargin) &&
        Objects.equals(this.payinAmount, userFundMarginData.payinAmount) &&
        Objects.equals(this.spanMargin, userFundMarginData.spanMargin) &&
        Objects.equals(this.adhocMargin, userFundMarginData.adhocMargin) &&
        Objects.equals(this.notionalCash, userFundMarginData.notionalCash) &&
        Objects.equals(this.availableMargin, userFundMarginData.availableMargin) &&
        Objects.equals(this.exposureMargin, userFundMarginData.exposureMargin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usedMargin, payinAmount, spanMargin, adhocMargin, notionalCash, availableMargin, exposureMargin);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserFundMarginData {\n");
    
    sb.append("    usedMargin: ").append(toIndentedString(usedMargin)).append("\n");
    sb.append("    payinAmount: ").append(toIndentedString(payinAmount)).append("\n");
    sb.append("    spanMargin: ").append(toIndentedString(spanMargin)).append("\n");
    sb.append("    adhocMargin: ").append(toIndentedString(adhocMargin)).append("\n");
    sb.append("    notionalCash: ").append(toIndentedString(notionalCash)).append("\n");
    sb.append("    availableMargin: ").append(toIndentedString(availableMargin)).append("\n");
    sb.append("    exposureMargin: ").append(toIndentedString(exposureMargin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
