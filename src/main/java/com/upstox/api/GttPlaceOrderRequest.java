/*
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.upstox.api.GttRule;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * GttPlaceOrderRequest
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-03-04T13:05:45.049908+05:30[Asia/Kolkata]")

public class GttPlaceOrderRequest {
  /**
   * Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("SINGLE")
    SINGLE("SINGLE"),
    @SerializedName("MULTIPLE")
    MULTIPLE("MULTIPLE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("quantity")
  private Integer quantity = null;

  /**
   * Signifies if the order was either Intraday, Delivery, CO or OCO
   */
  @JsonAdapter(ProductEnum.Adapter.class)
  public enum ProductEnum {
    @SerializedName("I")
    I("I"),
    @SerializedName("D")
    D("D");

    private String value;

    ProductEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ProductEnum fromValue(String input) {
      for (ProductEnum b : ProductEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ProductEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ProductEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ProductEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("product")
  private ProductEnum product = null;

  @SerializedName("rules")
  private List<GttRule> rules = new ArrayList<GttRule>();

  @SerializedName("instrument_token")
  private String instrumentToken = null;

  /**
   * Indicates whether its a buy or sell order
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    @SerializedName("BUY")
    BUY("BUY"),
    @SerializedName("SELL")
    SELL("SELL");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransactionTypeEnum fromValue(String input) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TransactionTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("transaction_type")
  private TransactionTypeEnum transactionType = null;

  public GttPlaceOrderRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order
   * @return type
  **/
  @Schema(example = "SINGLE", required = true, description = "Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public GttPlaceOrderRequest quantity(Integer quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Quantity with which the order is to be placed
   * @return quantity
  **/
  @Schema(example = "1", required = true, description = "Quantity with which the order is to be placed")
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public GttPlaceOrderRequest product(ProductEnum product) {
    this.product = product;
    return this;
  }

   /**
   * Signifies if the order was either Intraday, Delivery, CO or OCO
   * @return product
  **/
  @Schema(example = "D", required = true, description = "Signifies if the order was either Intraday, Delivery, CO or OCO")
  public ProductEnum getProduct() {
    return product;
  }

  public void setProduct(ProductEnum product) {
    this.product = product;
  }

  public GttPlaceOrderRequest rules(List<GttRule> rules) {
    this.rules = rules;
    return this;
  }

  public GttPlaceOrderRequest addRulesItem(GttRule rulesItem) {
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * List of rules defining the conditions for each leg in the GTT order
   * @return rules
  **/
  @Schema(required = true, description = "List of rules defining the conditions for each leg in the GTT order")
  public List<GttRule> getRules() {
    return rules;
  }

  public void setRules(List<GttRule> rules) {
    this.rules = rules;
  }

  public GttPlaceOrderRequest instrumentToken(String instrumentToken) {
    this.instrumentToken = instrumentToken;
    return this;
  }

   /**
   * Key of the instrument
   * @return instrumentToken
  **/
  @Schema(example = "NSE_EQ|INE848E01016", required = true, description = "Key of the instrument")
  public String getInstrumentToken() {
    return instrumentToken;
  }

  public void setInstrumentToken(String instrumentToken) {
    this.instrumentToken = instrumentToken;
  }

  public GttPlaceOrderRequest transactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Indicates whether its a buy or sell order
   * @return transactionType
  **/
  @Schema(example = "BUY", required = true, description = "Indicates whether its a buy or sell order")
  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GttPlaceOrderRequest gttPlaceOrderRequest = (GttPlaceOrderRequest) o;
    return Objects.equals(this.type, gttPlaceOrderRequest.type) &&
        Objects.equals(this.quantity, gttPlaceOrderRequest.quantity) &&
        Objects.equals(this.product, gttPlaceOrderRequest.product) &&
        Objects.equals(this.rules, gttPlaceOrderRequest.rules) &&
        Objects.equals(this.instrumentToken, gttPlaceOrderRequest.instrumentToken) &&
        Objects.equals(this.transactionType, gttPlaceOrderRequest.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, quantity, product, rules, instrumentToken, transactionType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GttPlaceOrderRequest {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    product: ").append(toIndentedString(product)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    instrumentToken: ").append(toIndentedString(instrumentToken)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
