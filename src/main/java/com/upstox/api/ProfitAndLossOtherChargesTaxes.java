/*
 * Upstox Developer API
 * Build your App on the Upstox platform  ![Banner](https://api.upstox.com/api-docs/images/banner.jpg \"banner\")  # Introduction  Upstox API is a set of rest APIs that provide data required to build a complete investment and trading platform. Execute orders in real time, manage user portfolio, stream live market data (using Websocket), and more, with the easy to understand API collection.  All requests are over HTTPS and the requests are sent with the content-type ‘application/json’. Developers have the option of choosing the response type as JSON or CSV for a few API calls.  To be able to use these APIs you need to create an App in the Developer Console and generate your **apiKey** and **apiSecret**. You can use a redirect URL which will be called after the login flow.  If you are a **trader**, you can directly create apps from Upstox mobile app or the desktop platform itself from **Apps** sections inside the **Account** Tab. Head over to <a href=\"http://account.upstox.com/developer/apps\" target=\"_blank\">account.upstox.com/developer/apps</a>.</br> If you are a **business** looking to integrate Upstox APIs, reach out to us and we will get a custom app created for you in no time.  It is highly recommended that you do not embed the **apiSecret** in your frontend app. Create a remote backend which does the handshake on behalf of the frontend app. Marking the apiSecret in the frontend app will make your app vulnerable to threats and potential issues.
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.upstox.api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Other charges levied
 */
@Schema(description = "Other charges levied")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-12T20:29:09.823661+05:30[Asia/Kolkata]")

public class ProfitAndLossOtherChargesTaxes {
  @SerializedName("transaction")
  private Float transaction = null;

  @SerializedName("clearing")
  private Float clearing = null;

  @SerializedName("others")
  private Float others = null;

  @SerializedName("sebi_turnover")
  private Float sebiTurnover = null;

  @SerializedName("demat_transaction")
  private Float dematTransaction = null;

  public ProfitAndLossOtherChargesTaxes transaction(Float transaction) {
    this.transaction = transaction;
    return this;
  }

   /**
   * transaction charges
   * @return transaction
  **/
  @Schema(description = "transaction charges")
  public Float getTransaction() {
    return transaction;
  }

  public void setTransaction(Float transaction) {
    this.transaction = transaction;
  }

  public ProfitAndLossOtherChargesTaxes clearing(Float clearing) {
    this.clearing = clearing;
    return this;
  }

   /**
   * clearing charges
   * @return clearing
  **/
  @Schema(description = "clearing charges")
  public Float getClearing() {
    return clearing;
  }

  public void setClearing(Float clearing) {
    this.clearing = clearing;
  }

  public ProfitAndLossOtherChargesTaxes others(Float others) {
    this.others = others;
    return this;
  }

   /**
   * others charges
   * @return others
  **/
  @Schema(description = "others charges")
  public Float getOthers() {
    return others;
  }

  public void setOthers(Float others) {
    this.others = others;
  }

  public ProfitAndLossOtherChargesTaxes sebiTurnover(Float sebiTurnover) {
    this.sebiTurnover = sebiTurnover;
    return this;
  }

   /**
   * SEBI turnover
   * @return sebiTurnover
  **/
  @Schema(description = "SEBI turnover")
  public Float getSebiTurnover() {
    return sebiTurnover;
  }

  public void setSebiTurnover(Float sebiTurnover) {
    this.sebiTurnover = sebiTurnover;
  }

  public ProfitAndLossOtherChargesTaxes dematTransaction(Float dematTransaction) {
    this.dematTransaction = dematTransaction;
    return this;
  }

   /**
   * demat transaction charges
   * @return dematTransaction
  **/
  @Schema(description = "demat transaction charges")
  public Float getDematTransaction() {
    return dematTransaction;
  }

  public void setDematTransaction(Float dematTransaction) {
    this.dematTransaction = dematTransaction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfitAndLossOtherChargesTaxes profitAndLossOtherChargesTaxes = (ProfitAndLossOtherChargesTaxes) o;
    return Objects.equals(this.transaction, profitAndLossOtherChargesTaxes.transaction) &&
        Objects.equals(this.clearing, profitAndLossOtherChargesTaxes.clearing) &&
        Objects.equals(this.others, profitAndLossOtherChargesTaxes.others) &&
        Objects.equals(this.sebiTurnover, profitAndLossOtherChargesTaxes.sebiTurnover) &&
        Objects.equals(this.dematTransaction, profitAndLossOtherChargesTaxes.dematTransaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transaction, clearing, others, sebiTurnover, dematTransaction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfitAndLossOtherChargesTaxes {\n");
    
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("    clearing: ").append(toIndentedString(clearing)).append("\n");
    sb.append("    others: ").append(toIndentedString(others)).append("\n");
    sb.append("    sebiTurnover: ").append(toIndentedString(sebiTurnover)).append("\n");
    sb.append("    dematTransaction: ").append(toIndentedString(dematTransaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
